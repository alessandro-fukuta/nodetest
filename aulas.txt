// aulas

arquivos estaticos
--------------------------------------------
app.use(express.static('public'))
--> criar a pasta public na raiz
--------------------------------------------


// criar estrutura front-end ejs com partials
--------------------------------------------
    criar pasta partials em public
    criar dentro de partials - > header.ejs  e  footer.ejs
    testar a estrutura usando ejs
--------------------------------------------

// criar o connection

var mysql = require("mysql2");

var connection = mysql.createConnection({
    host:"localhost",
    user:"fukuta",
    password:"FatecFranca123#",
    database: "MINHA_API"
});

module.exports = connection;

===> em seguida importar dentro do index.js
===> const connection = require("./database/connection");

--------------------------------------------------------------------------------------

// modelo MVC -> model view controller

criar o homeController
--------------------------------------------------------------------------------------

const express = require("express");
const router = express.Router();

router.get("/",(req,res) => {
    res.render("index");
})

router.get("/sobre",(req,res) => {
    res.render("sobre");
})

module.exports = router;

----------------------------------------------------------------------------------------
repositorio do projeto github

https://github.com/alessandro-fukuta/nodetest.git

--------------------------------------------------------------------------------------

--> importar dentro do index.js
const homesController = require("./home/homesController");
app.use(homesController,"/");
----------------------------------------------------------------------------------------

04/04/2025

// implementar CSS (estilos)


// implementar uma nav no header e outra no footer
// link do bootstrap
    
    https://getbootstrap.com/docs/5.3/components/navbar/


// implementar uma model de perguntas e respostas (chamada question)

       - criar a pasta perguntas na raiz
       - criar o arquivo Perguntas.js

        var mysql = require("mysql2");
        var connection = require("../database/connection");

        connection.connect(function(err) {
            // criando tabelas de perguntas e respostas
            // usando chave estrangeira

            if (err) throw err;
            console.log("Connected!");
            var sql = "create table if not exists perguntas (id int primary key auto_increment, pergunta longtext );";
            connection.query(sql, function(err,result) {
                 if (err) throw err;
                 console.log("Tabela: Perguntas OK");
            })

          
            // criando a tabela de respostas
          
            var sql = "create table if not exists respostas (id int primary key auto_increment, pergunta_id int, resposta longtext,
                       FOREIGN KEY (pergunta_id) REFERENCES perguntas(id));";

            connection.query(sql, function(err,result) {
            if (err) throw err;
                console.log("Tabela: Respostas OK");
            })

        })

        module.exports = connection;


// implementar o controller de perguntas e respostas
-----------------------------------------------------

criar o arquivo perguntasController.js
const express = require('express');
const router = express.Router();
const connection = require('../database/connection');

router.post("/pergunta", (req,res) => {

    // o body do post, vem com o json { pergunta: "a pergunta" };
    // pegando o conteudo da pergunta

    var pergunta = req.body.pergunta; 

    if (pergunta === undefined) {
        res.status = 400;
        res.json({err: "Dados Inválidos"});
    } else {

        // inserir a pergunta no BD.

        var SQL = "INSERT INTO perguntas values ?";
        var values = [
            [pergunta]
        ];

        connection.query(sql, [values], function(err,result) {
            if (err) {
                res.sendStatus(401).json({err: "A pergunta não cadastrada !"});
            }
            res.status(201).json({OK: "Pergunta Feita"});
        })

    }

});

module.exports = router;


// para testar vamos usar o POSTMAN ou SWAGGER

METODO POST para: (ip da vm)/pergunta
BODY - RAW
{
    "pegunta": "Qual o seu time favorito ?"
}



// para o metodo get de respostas
// faremos uma consulta baseado em chave estrangeira

USE MINHA_API;
SELECT * FROM respostas 
INNER JOIN perguntas ON pergunta_id = perguntas.id;



// correaçao 05/04
====================================================================================

no index.js 
-----------------------
app.use("/",questionController);

em QuestionController
-----------------------
// variavel SQL estava com nome errado na query
// adicionar em values o valor 0

  var SQL = "INSERT INTO perguntas values ?";
        var values = [
            [0,pergunta]
        ];

     
        connection.query(SQL, [values], function(err,result) {


criar o metodo GET pra retorno de uma lista de perguntas
ordenado por ID Decrescente
no QuestionController
------------------------------------------------------------------------
router.get("/pergunta", (req,res) => {

    var SQL = "SELECT * FROM perguntas ORDER BY id DESC";
    
    connection.query(SQL, function(err,result) {
        if (err) {
            res.sendStatus(401).json({err: "Erro ao listar perguntas"});
        }
        res.status(201).json({perguntas: result});
    })

})


// RETORNA JSON DE APENAS 1 PERGUNTA
router.get("/pergunta/:id", (req,res) => {

    // o id da pergunta vem na url
    var id = req.params.id;

    var SQL = "SELECT * FROM perguntas WHERE id = ?";

    connection.query(SQL, [id], function(err,result) {
        if (err) {
            res.status(401).json({err: "Pergunta não encontrada"});
        }
        res.status(200).json(result);
    })

})

// ALTERA PERGUNTA
router.put("/pergunta/:id", (req,res) => {

    // o body do post, vem com o json { pergunta: "a pergunta" };
    // pegando o conteudo da pergunta

    var id = req.params.id;
    var pergunta = req.body.pergunta; 

    console.log(pergunta);

    if (pergunta === undefined) {
        res.status = 400;
        res.json({err: "Dados Inválidos"});
    } else {

        // inserir a pergunta no BD.

        var SQL = "UPDATE perguntas SET pergunta = ? WHERE id = ?";
        var values = [
            pergunta,
            id
        ];

     
        connection.query(SQL, values, function(err,result) {
            if (err) {
                res.sendStatus(401).json({err: "A pergunta não cadastrada !"});
            }
            res.status(201).json({OK: "Pergunta Feita"});
        })

    }

});




// DELETA PERGUNTA
router.delete("/pergunta/:id", (req,res) => {

    // o body do post, vem com o json { pergunta: "a pergunta" };
    // pegando o conteudo da pergunta

    var id = req.params.id;

    console.log(id);

    if (id === undefined) {
        res.status = 400;
        res.json({err: "Dados Inválidos"});
    } else {

        // inserir a pergunta no BD.

        var SQL = "DELETE FROM perguntas WHERE id = ?";
        var values = [
            id
        ];

     
        connection.query(SQL, values, function(err,result) {
            if (err) {
                res.sendStatus(401).json({err: "A pergunta não cadastrada !"});
            }
            res.status(201).json({OK: "Pergunta Deletada"});
        })

    }

});

